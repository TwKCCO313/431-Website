---
title: "Why Today’s Scientist Thinks More Like a Programmer"
author: "Tom Kupferer"
date: 2025-03-25
format: html
categories: [blog, modern-science, informatics]
---

Jeff Leek’s *How to Be a Modern Scientist* struck a chord with me right from the introduction. Reflecting on ideas from literary critic Marjorie Perloff—who once suggested that today's writer resembles more of a **programmer** than a **tortured genius**—Leek draws a striking parallel to the world of science. He observes that a similar shift is happening in research: **modern scientists are no longer defined solely by novel ideas but by their ability to build systems, combine existing tools, and apply them creatively to new problems**.

That perspective deeply resonated with me. I’ve spent the past few years learning how to wrangle large datasets, structure reproducible code, and share work through platforms like GitHub. Every skill that once felt “extra”—from version control and literate programming in Quarto to tidy pipelines in R—has turned out to be **fundamental** to the way I do science.

This kind of scientist doesn’t just ask questions. They engineer frameworks to **ask better questions at scale**. Thinking like a programmer leads to more transparent, collaborative, and impactful science. When code is clean, shared, and documented, it invites others to reproduce, critique, and build upon your work. It democratizes knowledge in a way that peer-reviewed PDFs alone can’t.

I’m exploring ways **data integration and predictive modeling could support real-time decision-making in health crises**. I’ve learned that the technical backbone—the codebase—is just as vital as the hypothesis.

Moreover, the emphasis on **building reproducible tools** reminds me of another issue in public health and biomedical research: **interoperability**. Like reproducible code allows others to plug into your scientific process, **interoperable systems in healthcare**—like those built across different EHR platforms—enable stakeholders to share, access, and act on information seamlessly. When we don’t build with interoperability in mind, systems become siloed, and progress slows. The same holds for scientific work that isn’t reproducible or portable.

My professional and academic journey intersects quite clearly with Leek’s message. I grew up in a family of physicians and originally planned to follow that same path—I even went to medical school. But while studying medicine, I felt a strong pull in a different direction. I realized that my background gave me something rare—**a foot in both worlds**, healthcare and technology. That realization led me to change course and pursue a career in Biomedical and Health Informatics. Leaving medical school was a challenging but deliberate decision, knowing that my true passion lay in **bridging the gap between clinical care and technological innovation**.

That interdisciplinary perspective has become the core of my scientific identity. I understand how technology can serve medicine—and, just as importantly, how medicine can shape the questions we ask in technology. That bidirectional translation is at the heart of Leek’s call for scientists who don’t just specialize but **synthesize**, scientists who don’t just interpret findings, but **architect solutions**.

Leek’s vision is refreshing because it **recognizes the scientific power of engineering**. A well-documented R package, a robust data pipeline, or a reproducible analysis notebook can advance a field just as much as a clever new theory. In many cases, these tools make the clever theories testable in the first place.

If you’re an emerging scientist, especially in a computational or applied domain, I highly recommend reading *How to Be a Modern Scientist*. It’s part guide, part manifesto. Its central message is one I’ll carry forward in my PhD work and beyond: **science isn’t just about what you know—it’s about what you build, share, and make reproducible.**
